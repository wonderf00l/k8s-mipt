registry: "dzo.sw.sbc.space"
registry_path: "/sbt_dev/ci90000087_asgtmq_dev/micr/micr"
sha256: sha256:200c7696ed2d8d15fbd910595eec131e872bfa955de31ca82b0a49d6b8f33753 #"sha256:0afc25f5d9d1f0ef9c5ea456ebd42f892d7477399fc17f06bb638917095b3f42"

# sberworks.ru/sbt_dev/ci90000087_asgtmq_dev/micr/micr:0.2.0-171_eg@sha256:0afc25f5d9d1f0ef9c5ea456ebd42f892d7477399fc17f06bb638917095b3f42

pullPolicy: IfNotPresent
nameOverride: ""
fullnameOverride: ""

global:
  containerOrchestrationSystem: k8s

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

config:
  logging:
    level: trace
  server:
  #  port: 8090
  #    metrics:
  #      endpoint: /metrics
  #      statistic_level: 2

micro:
  resources: {}
#   - name: ca.crt
#     type: Secret
#     content: ""
#   - name: mapping-sap-response.bloblang
#     type: Common
#     content: |-
#       root.message.1c_list = this.variables.ORIGIN_BODY.parse_json()

securityContext: {}
podSecurityContext: {}
replicas: 1
enableServiceAccount: false

podAnnotations:
  sidecar.istio.io/inject: "false"
podLabels:
  sidecar.istio.io/inject: "false"

services: {}

# services:
#   httpPorts: 8081,8082
#   grpcPorts: 8091,8092

#properties: {}

properties:
  port: 61616
  amqp.host: lala.land
  amqp.name: testName
  grpc.consumer.grpcPort: 9090
  http.consumer.httpPort: 8080

  artemis.broker.username: artemis
  artemis.broker.password: artemis

  artemis.broker.url: amqp://artemis-mq:61616
  artemis.broker2.url: amqp://artemis-mq2:61616

  artemis.consumer.destinationName: UB.TEST.SYNC.QUEUE
  artemis.producer.destinationName: TEST.QUEUE.OUT
  artemis.producer2.destinationName: SECONDTEST.QUEUE.OUT
  artemis.producer3.destinationName: UB.TEST.SYNC.QUEUE

# routes: {}

routes:
  - route:
      id: http-to-kafka
      from:
        id: http-consumer
        uri: http:localhost:8080/?method=get&exchangePattern=InOut
        steps:
          - log:
              id: log-http-in-msg
              message: '"Got http in msg"'
          - setHeaders:
              id: set-kafka-key
              headers:
                - name: KEY
                  constant:
                    expression: "key"
          - setHeaders:
              id: set-headers
              headers:
                - name: "X-Test"
                  expression:
                    constant:
                      expression: "12345"
          - to:
              uri: kafka:test-producer-topic?brokers=kafka:9092 # kafka svc
              id: kafka-producer
              parameters:
                writeTimeout: 6s
                retries: 3
                requiredAcks: 1
                batchSize: 256
          - log:
              id: log-end-send-to-kafka
              message: '"sent msg to kafka"'

  - route:
      id: from-kafka
      from:
        id: kafka-consumer
        uri: kafka:test-producer-topic?brokers=kafka:9092 # kafka svc
        parameters:
          consumerGroupID: "0" # required
          readTimeout: 6s
          minBatchSize: 2
          maxBatchSize: 9000000
        steps:
          - log:
              id: log-kafka-msg
              message: '"Got msg from kafka"'
  # - route:
  #     id: http-to-kafka
  #     from:
  #       id: http-consumer
  #       uri: http:localhost:8080/?method=get&exchangePattern=InOut
  #       steps:
  #         - log:
  #             id: log-http-in-msg
  #             message: '"Got http in msg"'
  #         - setHeaders:
  #             id: set-kafka-key
  #             headers:
  #               - name: KEY
  #                 constant:
  #                   expression: "key"
  #         - setHeaders:
  #             id: set-headers
  #             headers:
  #               - name: "X-Test"
  #                 expression:
  #                   constant:
  #                     expression: "12345"
  #         - to:
  #             uri: kafka:test-producer-topic?brokers=kafka:9092 # kafka svc
  #             id: kafka-producer
  #             parameters:
  #               writeTimeout: 6s
  #               retries: 3
  #               requiredAcks: 1
  #               batchSize: 256
  #         - log:
  #             id: log-end-send-to-kafka
  #             message: '"sent msg to kafka"'
  # - route:
  #     id: from-kafka
  #     from:
  #       id: kafka-consumer
  #       uri: kafka:test-producer-topic?kafka:9092 #brokers=kafka-0.kafka.default.svc.cluster.local:9092 #kafka:9092 # kafka svc
  #       parameters:
  #         consumerGroupID: "0" # required
  #         readTimeout: 6s
  #         minBatchSize: 2
  #         maxBatchSize: 9000000
  #       steps:
  #         - log:
  #             id: log-kafka-msg
  #             message: '"Got msg from kafka"'

  # - route:
  #     id: kafka-to-amqp
  #     from:
  #       id: kafka-consumer
  #       uri: http:lalala.com:1234 #kafka:test-topic?brokers=localhost:9092
  #       parameters:
  #         consumerGroupID: "0" # required
  #         readTimeout: 6s
  #       steps:
  #         - log:
  #             id: log-all-headers
  #             message: '"All kafka message headers ${headers}"'
  #         - log:
  #             id: log-system-headers
  #             message: '"Kafka msg system headers: ${headers.KEY}, ${headers.TOPIC}, ${headers.PARTITION}, ${headers.OFFSET}, ${headers.TIMESTAMP}"'
  #         - to:
  #             uri: kafka:test-topic?brokers=localhost:9092
  #             parameters:
  #               writeTimeout: 6s
  #         - to:
  #             uri: amqp:127.0.0.1:8080 #kafka:test-topic?brokers=localhost:9092
  #             parameters:
  #               writeTimeout: 6s
  #         - to:
  #             uri: http:domainhttp.com:8080 #kafka:test-topic?brokers=localhost:9092
  #             parameters:
  #               writeTimeout: 6s
  #         - log:
  #             id: log-end
  #             message: '"End!!!"'
  # - route:
  #     id: timer-to-amqp
  #     from:
  #       id: timer-start
  #       uri: timer:testname?period=2s
  #       steps:
  #         - log:
  #             id: log-msg
  #             message: '"timer-msg"'
  #         - to:
  #             uri: amqp:10.25.8.4:61616
  #             id: amqp-sender
  #             parameters:
  #               destinationName: UB.TEST.SYNC.QUEUE
  #               username: artemis
  #               password: artemis
  #         - log:
  #             id: log-headers
  #             message: '"got amqp msg"'

  # - route:
  #     id: grpc-to-grpc-tls
  #     from:
  #       id: grpcConsumer
  #       uri: synapsegrpc:127.0.0.1:9090?exchangePattern=InOut
  #       parameters:
  #         keepAlive:
  #           keepAliveTime: 60s
  #           keepAliveTimeout: 10s
  #         connTimeout: 30s
  #         maxSendMsgSize: "500"
  #         maxRecvMsgSize: "4Mi"
  #         tls:
  #           enabled: true
  #           root_cas_file: ../../resource/certs/ca.crt
  #           client_certs:
  #             - cert_file: ../../resource/certs/server.crt
  #               key_file: ../../resource/certs/server.key
  #           skip_cert_verify: false
  #       steps:
  #         - to:
  #             id: grpcProducer
  #             uri: synapsegrpc:127.0.0.1:9091
  #             parameters:
  #               routing:
  #                 isAsync: false
  #                 checkRoutingHeader: true
  #                 fromRoutingHeaderOnly: false
  #               keepAlive:
  #                 keepAliveTime: 60s
  #                 keepAliveTimeout: 10s
  #               userAgent: "micro-producer"
  #               maxCallRecvMsgSize: "5K"
  #               maxCallSendMsgSize: "1M"
  #               minConnectTimeout: 10s
  #               backoff:
  #                 baseDelay: 500ms
  #                 maxDelay: 2m
  #                 multiplier: 2
  #                 jitter: 0.2
  #               tls:
  #                 enabled: true
  #                 root_cas_file: ../../resource/certs/ca.crt
  #                 client_certs:
  #                   - cert_file: ../../resource/certs/client.crt
  #                     key_file: ../../resource/certs/client.key
  #                 skip_cert_verify: false
  #                 serverName: localhost
  # - route:
  #     id: http-log-commit
  #     from:
  #       id: http-consumer-1
  #       uri: http:localhost:8091/commit?httpMethod=post
  #       steps:
  #         - log:
  #             id: log-message
  #             message: '"Commit : ${body.commit} variables: ${variables}"'
  # - route:
  #     id: timer-log-http
  #     from:
  #       id: timer2
  #       uri: timer:toredis?period=4s
  #       parameters:
  #         body: '[{"a":"2"},{"a":"3"}]'
  #       steps:
  #         - log:
  #             id: log-message
  #             message: '"Log new message"'
  #         - to:
  #             id: http-send
  #             uri: http:10.25.8.4:8080/ping?httpMethod=GET
  # - route:
  #     id: http-log-commit
  #     from:
  #       id: http-consumer-1
  #       uri: http:localhost:8080/commit?httpMethod=get
  #       steps:
  #         - log:
  #             id: log-message
  #             message: '"got Commit"'
  # - route:
  #     id: amqp-log-ftp
  #     from:
  #       uri: amqp://10.25.8.6:61616
  #       id: amqp-sender
  #       parameters:
  #         destinationName: TEST.QUEUE.OUT
  #         username: artemis
  #         password: artemis
  #       steps:
  #         - log:
  #             id: log-headers
  #             message: '"got amqp msg"'
# routes:
#   - route:
#       id: grpc-log-amqp
#       from:
#         id: from-3453
#         uri: synapsegrpc:127.0.0.1${grpc.consumer.grpcPort}
#         parameters:
#           synchronous: true
#         steps:
#           - log:
#               id: log-all
#               message: '"Message field body: ${body} headers: ${headers}"'
#   - route:
#       id: http-to-log
#       from:
#         id: http-start
#         uri: http:localhost:8080/overide?exchangePattern=InOut&httpMethod=post
#         steps:
#           - setVariables:
#               id: temp-data-setter
#               variables:
#                 - name: HTTP_RESPONSE
#                   expression:
#                     constant:
#                       expression: "0"
#           - log:
#               id: log-message
#               message: '"Message variables: ${variables}"'
#           - loadBalance:
#               id: loadBalance-3318
#               roundRobinLoadBalancer: {}
#               steps:
#                 - to:
#                     id: amqp-sender
#                     uri: ${artemis.broker.url}
#                     parameters:
#                       destinationName: ${artemis.producer.destinationName}
#                       username: ${artemis.broker.username}
#                       password: ${artemis.broker.password}
#                 - to:
#                     id: amqp-sender-2
#                     uri: ${artemis.broker2.url}
#                     parameters:
#                       destinationName: ${artemis.producer2.destinationName}
#                       username: ${artemis.broker.username}
#                       password: ${artemis.broker.password}
#                 - to:
#                     id: amqp-sender-3
#                     uri: ${artemis.broker2.url}
#                     parameters:
#                       destinationName: ${artemis.producer3.destinationName}
#                       username: ${artemis.broker.username}
#                       password: ${artemis.broker.password}
